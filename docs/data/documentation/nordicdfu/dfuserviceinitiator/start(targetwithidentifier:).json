{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nordicdfu\/dfuserviceinitiator\/start(targetwithidentifier:)"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@objc","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"kind":"text","text":"("},{"text":"targetWithIdentifier","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"uuid"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation4UUIDV","kind":"typeIdentifier","text":"UUID"},{"kind":"text","text":") -> "},{"preciseIdentifier":"c:@M@NordicDFU@objc(cs)DFUServiceController","identifier":"doc:\/\/NordicDFU\/documentation\/NordicDFU\/DFUServiceController","text":"DFUServiceController","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The UUID associated with the peer.","type":"text"}]}],"name":"uuid"}]},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"identifier":"doc:\/\/NordicDFU\/documentation\/NordicDFU\/DFUServiceController","type":"reference","isActive":true},{"text":" object that can be used to control the DFU","type":"text"},{"type":"text","text":" "},{"text":"operation, or ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", if the file was not set, or the peripheral instance"},{"text":" ","type":"text"},{"type":"text","text":"could not be retrieved."}]}],"kind":"content"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"When started, the service will automatically connect to the target, switch to"},{"text":" ","type":"text"},{"type":"text","text":"DFU Bootloader mode (if necessary), and send all the content of the specified"},{"type":"text","text":" "},{"text":"firmware file in one or two connections. Two connections will be used if a ZIP","type":"text"},{"text":" ","type":"text"},{"text":"file contains a SoftDevice and\/or Bootloader and an Application. First, the","type":"text"},{"text":" ","type":"text"},{"text":"SoftDevice and\/or Bootloader will be transferred, then the service will disconnect,","type":"text"},{"type":"text","text":" "},{"text":"reconnect to the (new) Bootloader again and send the Application (unless the","type":"text"},{"type":"text","text":" "},{"text":"target supports receiving all files in a single connection). The peripheral","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"will NOT be reconnected after the DFU is completed, aborted or has failed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method does not take control over the peripheral."},{"text":" ","type":"text"},{"type":"text","text":"A new central manager is used, from which a copy of the peripheral is retrieved."},{"type":"text","text":" "},{"type":"text","text":"Be warned, that the original peripheral delegate may receive a lot of calls, and"},{"text":" ","type":"text"},{"text":"it will restart during the process. The app should not send any data to DFU","type":"text"},{"type":"text","text":" "},{"type":"text","text":"characteristics when DFU is in progress."}]}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"targetWithIdentifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation4UUIDV","kind":"typeIdentifier","text":"UUID"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"c:@M@NordicDFU@objc(cs)DFUServiceController","kind":"typeIdentifier","text":"DFUServiceController"},{"text":"?","kind":"text"}],"roleHeading":"Instance Method","modules":[{"name":"NordicDFU"}],"externalID":"c:@M@NordicDFU@objc(cs)DFUServiceInitiator(im)startWithTargetWithIdentifier:","role":"symbol","symbolKind":"method","title":"start(targetWithIdentifier:)"},"sections":[],"hierarchy":{"paths":[["doc:\/\/NordicDFU\/documentation\/NordicDFU","doc:\/\/NordicDFU\/documentation\/NordicDFU\/DFUServiceInitiator"]]},"abstract":[{"type":"text","text":"Starts sending the specified firmware to the DFU target with given identifier."}],"kind":"symbol","identifier":{"url":"doc:\/\/NordicDFU\/documentation\/NordicDFU\/DFUServiceInitiator\/start(targetWithIdentifier:)","interfaceLanguage":"swift"},"references":{"doc://NordicDFU/documentation/NordicDFU/DFUServiceInitiator/start(targetWithIdentifier:)":{"title":"start(targetWithIdentifier:)","type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Starts sending the specified firmware to the DFU target with given identifier."}],"identifier":"doc:\/\/NordicDFU\/documentation\/NordicDFU\/DFUServiceInitiator\/start(targetWithIdentifier:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"text":"(","kind":"text"},{"text":"targetWithIdentifier","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UUID","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4UUIDV"},{"kind":"text","text":") -> "},{"preciseIdentifier":"c:@M@NordicDFU@objc(cs)DFUServiceController","kind":"typeIdentifier","text":"DFUServiceController"},{"kind":"text","text":"?"}],"url":"\/documentation\/nordicdfu\/dfuserviceinitiator\/start(targetwithidentifier:)"},"doc://NordicDFU/documentation/NordicDFU/DFUServiceController":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/NordicDFU\/documentation\/NordicDFU\/DFUServiceController","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DFUServiceController"}],"title":"DFUServiceController","navigatorTitle":[{"text":"DFUServiceController","kind":"identifier"}],"type":"topic","abstract":[{"text":"The controller allows pausing, resuming or aborting the ongoing DFU operation.","type":"text"}],"url":"\/documentation\/nordicdfu\/dfuservicecontroller"},"doc://NordicDFU/documentation/NordicDFU":{"kind":"symbol","title":"NordicDFU","identifier":"doc:\/\/NordicDFU\/documentation\/NordicDFU","role":"collection","type":"topic","url":"\/documentation\/nordicdfu","abstract":[{"text":"A Swift library for updating firmware of nRF51 and nRF52 devices over Bluetooth LE.","type":"text"}]},"doc://NordicDFU/documentation/NordicDFU/DFUServiceInitiator":{"identifier":"doc:\/\/NordicDFU\/documentation\/NordicDFU\/DFUServiceInitiator","type":"topic","url":"\/documentation\/nordicdfu\/dfuserviceinitiator","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"DFUServiceInitiator","kind":"identifier"}],"title":"DFUServiceInitiator","navigatorTitle":[{"kind":"identifier","text":"DFUServiceInitiator"}],"role":"symbol","abstract":[{"type":"text","text":"The initiator object should be used to initiate updating firmware"},{"type":"text","text":" "},{"text":"on a remote Bluetooth LE target compatible with the Nordic Semiconductorâ€™s Legacy or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Secure DFU (Device Firmware Update) protocol from nRF5 SDK."}],"kind":"symbol"}}}